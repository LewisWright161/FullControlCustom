!pip install git+https://github.com/FullControlXYZ/fullcontrol --quiet
import fullcontrol as fc
from math import tau, sin, pi, cos, exp
import plotly.graph_objects as go

figw = [None] * n_population
fig = [None] * n_population

parameters = {}
centre_xy = 0

for individual in range(n_population):
for parameter in range(n_parameters):
  parameters[parameter_names[parameter]] = decimal_value[individual][parameter]
# extract data from individual
# advanced design parameters
# shell parameters:
zag_min, zag_max = 1, 5 # Depth of zigzags at the flat region of the shade zag_min (where they don't need to be deep to achieve a nice rippled texture because they are closer together (smaller radius)) and at the star tips zag_max (where they need to be deeper to still look look good deep ridges)
rip_depth, rip_freq = 0.5, 30 # Depth of tiny ripples in the Z direction and how many tiny ripples there are in the Z direction over the whole height
swerve = 0.02 # radians #  The swerving streamlines are achieved by angular offsets. This number controls the magnitude of those offsets and the amount of swerve.
segs_shell = 300 # Segments in the whole perimeter of the shell
x_1, x_2 = 6, 30 # These parameters controls how high up the shade the streamline swerves come into effect (and return to original shape at the top of the lampshade)
# inner-frame parameters:
frame_width_factor = 2.5 # The extrusion width of the inner frame is greater than the extrusion width of the outer shade by theis factor
frame_line_spacing_ratio = 0.2 # How laterally offset are the lines of the inner frame when they kiss (as a fraction of extrusion width) - the centre to centre distance of the lines is 2 * this value * frame line extrusion width
layer_ratio = 2 # this number is the number of layers of the shell that are printed for every layer of the frame
start_angle = 0.75*tau # this cannot be modified without also modifying the direction of the first frame line (currently in +Y direction)
frame_overlap =  2.5 # how much the inner frame overlaps with the shell
segs_frame = 64 # Segments per single wavey line in the inner frame
# printing parameters:
EH, EW = 0.2, 0.5 # Extrusion height and width for the shell of the lamp shade
initial_print_speed, main_print_speed, speedchange_layers  = 500, 1500, 5 # print speed ramps up from initial_print_speed to main_print_speed over the first few layers (speedchange_layers)

EH,segs_shell = EH * 30,parameters['Tip Number']*20

# automatically calculated parameters
frame_rad_max = parameters['Nominal Radius']+parameters['Tip Length']+frame_overlap # Outer radius of the wavey lines of the inner frame - this value is set so the lines connect will with the outer shade section, but don't cross it too much
# centre_xy = frame_rad_max+bulge1+bulge2+tip_len-10
parameters['Inner Frame Radius'] += EW/2 # increase the hole size to allow for the extrusion width
total_segs = segs_shell*(parameters['Height']/EH)
shell_layers, frame_layers = int(parameters['Height']/EH), int(parameters['Frame Height']/EH)
initial_z = EH*0.7 # initial nozzle position is set lower than the extrusion height to get a bit of 'squish' for good bed adhesion

t_steps_shell, t_steps_frame_line = fc.linspace(0, 1, segs_shell+1), fc.linspace(0, 1, segs_frame+1)
for layer in range(shell_layers):
    if layer <= speedchange_layers: print_speed = initial_print_speed + (main_print_speed-initial_print_speed)*(layer/speedchange_layers)
    z_now = initial_z + layer*EH
    z_fraction = z_now/parameters['Height']
    centre_now = fc.Point(x=centre_xy, y=centre_xy, z=z_now)
    shell_steps, wave_steps = [], []
    for t_now in t_steps_shell[:int((segs_shell/parameters['Tip Number'])/2)+1]: # calculate point in the first half of the region between the first and second 'star tips'
        a_now = start_angle+(tau*t_now) # increase polar angle for each point
        angular_swerve = -((swerve*tau*sin(t_now*parameters['Tip Number']*tau+(tau/2))))*(((1/(1+exp(x_1-z_fraction*x_2)))*(1/(1+exp(x_1-(1-z_fraction)*x_2))))-(0.5*(sin(z_fraction*0.5*tau))**20)) # modify the polar angle of the current point to achieve a swerving shape in an opposing symmetric clockwise/anti-clockwise manner to make bulges appear to grow wider
        star_shape_wave = (parameters['Tip Length']*(0.5+0.5*(cos(t_now*parameters['Tip Number']*tau)))**2.5) # radial modifier for the current point due to the start-tip shape
        primary_z_wave = (parameters['Bulge Amplitde 1']*(sin(z_fraction*0.5*tau))**1) # radial modifier for the current point due to the main bulge
        secondary_z_waves = (((parameters['Bulge Amplitude 2']*(0.5+0.5*(cos((z_fraction+0.15)*2.3*tau)))**1.5))) # radial modifier for the current point due to the secondary bulges
        zigzag_wave = ((0.5-(0.5*cos(t_now*(segs_shell/2)*2*pi)))*(zag_min+(zag_max*(0.5+0.5*(cos(t_now*parameters['Tip Number']*tau)))**2)))
        tiny_z_ripples = (rip_depth*(sin(z_fraction*rip_freq*tau))**2)
        r_now = parameters['Nominal Radius'] + star_shape_wave + primary_z_wave + secondary_z_waves + zigzag_wave + tiny_z_ripples
        shell_steps.append(fc.polar_to_point(centre_now, r_now, a_now+angular_swerve)) # add the point to the current list of points based on the current angle and radius
    shell_steps.extend(fclab.reflectXYpolar_list(shell_steps, centre_now, start_angle+pi/parameters['Tip Number'])) # create the second half of the region between the first and second 'star tips' to achieve a rotationally repeating unit cell
    shell_steps = fc.move_polar(shell_steps, centre_now, 0, tau/parameters['Tip Number'], copy=True, copy_quantity=parameters['Tip Number']) # repeat the unit cell for all 'start tips'
    # previous_layer_point = shell_steps[-1]
    # if layer >0: print(f'approximate overhang for layer {layer}: {(360/tau)*fclab.angleZ(steps[-1], previous_layer_point)} degrees (exluding overhang due to mini z ripples)')
    steps[individual].extend([fc.ExtrusionGeometry(width=EW, height=EH), fc.Printer(print_speed=print_speed)] + shell_steps) # set the current speed and extrusion geometry and add all the points for the shell for this layer
fig[individual] = transform(steps[individual], 'plot', fc.PlotControls(style='line', zoom=0.4))
figw[individual] = go.FigureWidget(fig[individual])
